@mixin generate-text-style($settings) {
    
    @each $selector, $styles in $settings {

        // default
        @if $selector != 'desktop' and $selector != 'titles' {
            
            #{$selector} {
                @each $property, $value in $styles {
                    @if $property == 'font-family' {
                        #{$property}: font-family($value);
                    }
                    @else {
                        #{$property}: var(--ts-#{$selector}-#{$property});
                    }
                }
            }
            
            .ts-#{$selector} {
                @each $property, $value in $styles {
                    @if $property == 'font-family' {
                        #{$property}: font-family($value);
                    }
                    @else {
                        #{$property}: var(--ts-#{$selector}-#{$property});
                    }
                }
            }

            :root {
                @each $property, $value in $styles {
                    @if $property == 'font-family' {
                        // #{$property}: font-family($value);
                    }
                    @else {
                        --ts-#{$selector}-#{$property}: #{$value};
                    }
                }
            }
        }

        // titles
        @if $selector == 'titles' {

            h1,
            h2,
            h3,
            h4,
            h5,
            h6,
            .ts-h1,
            .ts-h2,
            .ts-h3,
            .ts-h4,
            .ts-h5,
            .ts-h6 {
                @each $property, $value in $styles {
                    @if $property == 'font-family' {
                        #{$property}: font-family($value);
                    }
                    @else {
                        #{$property}: var(--ts-#{$selector}-#{$property});
                    }
                }
            }

            :root {
                @each $property, $value in $styles {
                    @if $property == 'font-family' {
                        // #{$property}: font-family($value);
                    }
                    @else {
                        --ts-#{$selector}-#{$property}: #{$value};
                    }
                }
            }
        }

        // specifics
        // @if $selector == 'specifics' {
            
        //     @each $_selector, $_styles in $styles {
                
        //         // .ts-#{$_selector} {
        //         //     @each $property, $value in $_styles {
        //         //         @if $property == 'font-family' {
        //         //             #{$property}: font-family($value);
        //         //         }
        //         //         @else {
        //         //             #{$property}: #{$value};
        //         //         }
        //         //     }
        //         // }

        //         .ts-#{$_selector} {
        //             @each $property, $value in $_styles {
        //                 @if $property == 'font-family' {
        //                     #{$property}: font-family($value);
        //                 }
        //                 @else {
        //                     #{$property}: var(--ts-#{$_selector}-#{$property});
        //                 }
        //             }
        //         }
    
        //         :root {
        //             @each $property, $value in $_styles {
        //                 @if $property == 'font-family' {
        //                     // #{$property}: font-family($value);
        //                 }
        //                 @else {
        //                     --ts-#{$_selector}-#{$property}: #{$value};
        //                 }
        //             }
        //         }
        //     }
        // }
    }
}


// textStyles
@if variable-exists(data) {
    @each $settingName, $settings in $data {
        
        @if $settingName == 'textStyles' {
            $desktopSettings: map-get($settings, 'desktop');

            @layer utilities {

                // default
                @include generate-text-style($settings);
    
                // desktop
                @if $desktopSettings {
                    
                    @include desktop {
                        @include generate-text-style($desktopSettings);
                    }
                }
            }
        }
    }
}


// margins
@if variable-exists(data) {

    @each $settingName, $settings in $data {
        @if $settingName == 'margins' {
            
            @each $key, $value in $settings {
                @include min-width($key) {
                    :root {
                        --margin: #{$value}rem;
                    }
                }
            }
        }
    }
}


// spacings
@if variable-exists(data) {
    @each $settingName, $settings in $data {

        @if $settingName == 'spacings' {
            $desktopSettings: map-get($settings, 'desktop');

            :root {
                @each $key, $value in $settings {

                    @if $key != 'desktop' {
                        --spacing-#{$key}: #{$value}rem;
                    }
                }
            }
            
            // desktop
            @if $desktopSettings {
                @include desktop {

                    :root {
                        @each $key, $value in $desktopSettings {
                            --spacing-#{$key}: #{$value}rem;
                        }
                    }
                }
            }
        }
    }
}


// rem
@if variable-exists(data) {
    @each $settingName, $settings in $data {

        @if $settingName == 'rem' {
            @each $key, $value in $settings {

                @include min-width($key) {

                    @if $value != 'scale' {
                        html {
                            font-size: $value;
                        }
                    }

                    @if $value == 'scale' {
                        $breakpoint: breakpoint($key);

                        html {
                            font-size: calc(100vw * 10 / #{$breakpoint});
                        }
                    }
                }
            }
        }
    }
}


// gutters
@if variable-exists(data) {
    @each $settingName, $settings in $data {

        @if $settingName == 'gutters' {
            @each $key, $value in $settings {
                
                @include min-width($key) {

                    :root {
                        --gap: #{$value}rem;
                    }
                }
            }
        }
    }

    .list,
    .gap {
        gap: var(--gap);
    }
}


// max columns
@if variable-exists(data) {
    @each $settingName, $settings in $data {

        @if $settingName == 'maxColumns' {
            @each $key, $value in $settings {
                
                @include min-width($key) {

                    .grid.list {
                        grid-template-columns: repeat(#{$value}, minmax(0, 1fr));
                    }
                }
            }
        }
    }
}


// columns
@if variable-exists(data) {
    $maxColumns: map-get($data, 'maxColumns');

    @if $maxColumns {
        @each $settingName, $settings in $data {
    
            @if $settingName == 'columns' {
                @each $key, $value in $settings {
                    $maxColumnsValue: map-get($maxColumns, $key);
    
                    @if $maxColumnsValue {

                        @include min-width($key) {
                            $columnsWidth: calc(#{$maxColumnsValue} / #{$value});
        
                            .grid.list > *:not([class*="col"]) {
                                grid-column: span #{$columnsWidth} / span #{$columnsWidth};
                            }
                        }
                    }
                }
            }
        }
    }
}


// colors
@if variable-exists(data) {
    $colors: map-get($data, 'colors');
    
    @if $colors {
        $dark: map-get($colors, 'dark');

        :root {
            @each $name, $value in $colors {
                --color-#{"" + $name}: #{$value};
            }
        }
    }
}


// radius
@if variable-exists(data) {
    $radius: map-get($data, 'radius');
    
    @if $radius {
        .rounded {
            border-radius: #{$radius}rem;
        }
    }
}


// layout
@if variable-exists(data) {
    $maxColumns: map-get($data, 'maxColumns');
    
    @if $maxColumns {
        @each $key, $value in $maxColumns {
            @include min-width($key) {
                :root {
                    --max-columns: #{$value};
                }
            }
        }
    }

    :root {
        --width-of-layout: calc(100vw - var(--scrollbar-width) - 2 * var(--margin));
    }
}